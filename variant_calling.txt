#!/usr/bin/env bash

print_usage() {
  echo "Usage: ..."
}

# Define default parameters that may be optionally specified
out=".";
threads=1

while getopts 's:g:r:h:v:o:t:' flag; do
  case "${flag}" in
    s) sample="${OPTARG}" ;;
    g) genome="${OPTARG}" ;;
    r) regions="${OPTARG}" ;;
    h) hapcompass="${OPTARG}" ;;
    v) hc2vcf="${OPTARG}" ;;
    o) out="${OPTARG}" ;;
    t) threads="${OPTARG}" ;;
    *) print_usage
       exit 1 ;;
  esac
done

# Shift to access all other unparsed arguments (all bam files to merge)
shift "$((OPTIND-1))"

# If genome is not indexed then raise error.
if [ ! -f ${genome}.fai ] ; then
	echo "Genome must be indexed."; exit 
fi

# Create directory to store VCF output.
sub="${out}/vcfs"
mkdir ${sub}

# Merge coordinate sorted replicates. This is run first to ensure all threads are available from bcftools.
samtools merge -@ ${threads} ${out}/${sample}.replicate_merge.bam "${@}"
samtools index -@ ${threads} ${out}/${sample}.replicate_merge.bam

# Call variants from merged sample file and quality filter.
bcftools mpileup --ignore-RG --count-orphans -Ou --max-depth 100000 -f ${genome} --regions-file ${regions} ${out}/${sample}.replicate_merge.bam |
  bcftools call --skip-variants indels --multiallelic-caller --variants-only -Ou |
  bcftools view -i '%QUAL>=20' -Ou |
  bcftools sort -Oz -o ${sub}/${sample}.sorted.vcf.gz

bcftools index ${sub}/${sample}.sorted.vcf.gz
	
# Subset VCF by capture region and perform haplotype phasing.
N=2
while IFS=$'\t' read -r chr start end region; do
  ((i=i%N)); ((i++==0)) && wait
  {
  bcftools view --regions ${chr}:$((${start}+1))-${end} -Ov ${sub}/${sample}.sorted.vcf.gz > ${sub}/${sample}_${region}.vcf
  java -Xmx30g -jar ${hapcompass} --bam ${out}/${sample}.replicate_merge.bam --vcf ${sub}/${sample}_${region}.vcf --output ${sub}/${sample}_${region}_hapcompass
  } &
done <${regions}

MWER_solution_all_regions="${sub}/${sample}_all_regions_hapcompass_MWER_solution.txt"
rm ${MWER_solution_all_regions}
while IFS=  read -r -d $'\0' file; do
  # Get line number of header of top scoring section
  top_score_line=$(grep -n BLOCK ${file} | sort -k 6 -nr | cut -f 1 -d ':' | head -n 1)
  # Print out only the top scoring block
  awk -v n=${top_score_line} 'NR<n {next} NR==n {print;next} /^BLOCK/ {exit} {print}' ${file} >> ${MWER_solution_all_regions}
done < <(find ${sub} -type f -name "${sample}_*_hapcompass_MWER_solution.txt" -print0)

# Convert solution to VCF for genome masking
java -jar ${hc2vcf} ${MWER_solution_all_regions} <(gunzip -c ${sub}/${sample}.sorted.vcf.gz) 2 true
	
# Convert VCF to SNPsplit friendly output
awk -v OFS=$'\t' 'substr($10,1,3)=="0|1" {print $3, $1, $2, 1, $4"/"$5} substr($10,1,3)=="1|0" {print $3, $1, $2, 1, $5"/"$4}' ${MWER_solution_all_regions}.vcf > ${sub}/${sample}_MWER_solution_snpsplit.txt
